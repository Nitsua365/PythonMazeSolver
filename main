import numpy as np
import cv2
from maze import Maze
from MazeGraph import MazeGraph
import os
import time

def main():
    inputMazeName = input("input file name of image (must be a PNG): ")

    if not inputMazeName.endswith(".png") and not inputMazeName.endswith(".PNG"):
        inputMazeName += ".png"

    # check if image exists
    if not os.path.exists(inputMazeName):
        print("IMAGE DOESN'T EXIST")
        exit(-1)

    inputMaze = cv2.imread(inputMazeName)

    mainMaze = Maze(inputMaze)

    print("\n" + mainMaze.__str__())

    start = time.time()
    mazeSolver = MazeGraph(mainMaze)
    end = time.time() - start
    print("\ntime to build graph:")
    print(str(end) + " seconds")

    print("\nMazeSolving Algorithms")
    print("1. DFS")
    print("2. BFS")
    print("3. Dijkstra")
    algInput = int(input("\nSelect Maze Solving Algorithm: "))

    if algInput == 1:

        startTime = time.time()
        mazeSolver.DFS()
        end = time.time() - startTime

        print("time to solve: " + str(end) + " seconds ")
        print("number of nodes: " + str(len(mazeSolver.__getattribute__('adjList'))))
        print("number of edges: " + str(mazeSolver.__getattribute__('edgeCount')))

        print("Search Stack:")
        for i in mazeSolver.__getattribute__('DFSSearchStack'):
            print(i.__str__())

        while len(mazeSolver.__getattribute__('DFSSearchStack')) > 1:
            node1 = mazeSolver.__getattribute__('DFSSearchStack').pop().__getattribute__('coordinate')
            node2 = mazeSolver.__getattribute__('DFSSearchStack')[len(mazeSolver.__getattribute__('DFSSearchStack')) - 1].__getattribute__('coordinate')

            if node1[0] == node2[0]:
                if node1[1] < node2[1]:
                    yCount = node1[1]
                    xCoord = node1[0]
                    while yCount <= node2[1]:
                        mazeSolver.drawNode([xCoord, yCount])
                        yCount += mainMaze.__getattribute__('nodeSize') + mainMaze.__getattribute__('wallWidth')

                else:
                    yCount = node2[1]
                    xCoord = node2[0]
                    while yCount <= node1[1]:
                        mazeSolver.drawNode([xCoord, yCount])
                        yCount += mainMaze.__getattribute__('nodeSize') + mainMaze.__getattribute__('wallWidth')

            elif node1[1] == node2[1]:
                if node1[0] < node2[0]:
                    xCount = node1[0]
                    yCoord = node1[1]
                    while xCount <= node2[0]:
                        mazeSolver.drawNode([xCount, yCoord])
                        xCount += mainMaze.__getattribute__('nodeSize') + mainMaze.__getattribute__('wallWidth')

                else:
                    xCount = node2[0]
                    yCoord = node1[1]
                    while xCount <= node1[0]:
                        mazeSolver.drawNode([xCount, yCoord])
                        xCount += mainMaze.__getattribute__('nodeSize') + mainMaze.__getattribute__('wallWidth')


    elif algInput == 2:

        startTime = time.time()
        mazeSolver.BFS()
        end = time.time() - startTime

        print("time to complete: " + str(end) + " seconds ")
        print("number of nodes: " + str(len(mazeSolver.__getattribute__('adjList'))))
        print("number of edges: " + str(mazeSolver.__getattribute__('edgeCount')))
        print("search path: ")

        backTrack = mazeSolver.__getattribute__('BFSBacktrack')
        backTrackKeys = list(backTrack.keys())
        backTrackValues = list(backTrack.values())
        backTrack = list(mazeSolver.__getattribute__('BFSBacktrack').items())
        adjList = mazeSolver.__getattribute__('adjList')

        searchNode = backTrack[0]

        # find the start node in the backtrack process
        for i in range(0, len(backTrackKeys)):
            if backTrackKeys[i] == 0:
                searchNode = backTrack[i]
                break

        # while the search node does not equal the end node
        while not adjList[searchNode[1]][0] == adjList[1][0]:

            mazeSolver.drawNode(adjList[searchNode[0]][0].__getattribute__('coordinate'))
            mazeSolver.drawNode(adjList[searchNode[1]][0].__getattribute__('coordinate'))

            for i in range(0, len(backTrackKeys)):
                if adjList[backTrackKeys[i]][0] == adjList[searchNode[1]][0]:
                    searchNode = backTrack[i]
                    break




    elif algInput == 3:
        mazeSolver.Dijkstra()
    else:
        print("INVALID INPUT")

    outMazeName = inputMazeName[:inputMazeName.rfind(".")] + "_SOLUTION" + inputMazeName[inputMazeName.rfind("."):]

    outMaze = cv2.imwrite(outMazeName, mainMaze.__getattribute__('image'))

if __name__ == "__main__":
    main()
