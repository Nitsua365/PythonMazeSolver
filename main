import numpy as np
import cv2
# from DijkstraGraph import DijkstraGraph
from maze import Maze
from MazeGraph import MazeGraph
import os
import time


def drawPath(node1, node2, mazeSolver, mainMaze):
    if node1[0] == node2[0]:
        if node1[1] < node2[1]:
            yCount = node1[1]
            xCoord = node1[0]
            while yCount <= node2[1]:
                mazeSolver.drawNode([xCoord, yCount])
                yCount += mainMaze.__getattribute__('nodeSize') + mainMaze.__getattribute__('wallWidth')

        else:
            yCount = node2[1]
            xCoord = node2[0]
            while yCount <= node1[1]:
                mazeSolver.drawNode([xCoord, yCount])
                yCount += mainMaze.__getattribute__('nodeSize') + mainMaze.__getattribute__('wallWidth')

    elif node1[1] == node2[1]:
        if node1[0] < node2[0]:
            xCount = node1[0]
            yCoord = node1[1]
            while xCount <= node2[0]:
                mazeSolver.drawNode([xCount, yCoord])
                xCount += mainMaze.__getattribute__('nodeSize') + mainMaze.__getattribute__('wallWidth')

        else:
            xCount = node2[0]
            yCoord = node1[1]
            while xCount <= node1[0]:
                mazeSolver.drawNode([xCount, yCoord])
                xCount += mainMaze.__getattribute__('nodeSize') + mainMaze.__getattribute__('wallWidth')


def main():
    inputMazeName = input("input file name of image (must be a PNG): ")

    if not inputMazeName.endswith(".png") and not inputMazeName.endswith(".PNG"):
        inputMazeName += ".png"

    # check if image exists
    if not os.path.exists(inputMazeName):
        print("IMAGE DOESN'T EXIST")
        exit(-1)

    inputMaze = cv2.imread(inputMazeName)

    mainMaze = Maze(inputMaze)

    print("\n" + mainMaze.__str__())

    print("\nMazeSolving Algorithms")
    print("1. DFS")
    print("2. BFS")
    print("3. Dijkstra")
    algInput = int(input("\nSelect Maze Solving Algorithm: "))

    if algInput == 1:

        start = time.time()
        mazeSolver = MazeGraph(mainMaze)
        end = time.time() - start
        print("\ntime to build graph:")
        print(str(end) + " seconds\n")

        startTime = time.time()
        mazeSolver.DFS()
        end = time.time() - startTime

        print("time to solve: " + str(end) + " seconds ")
        print("number of nodes: " + str(len(mazeSolver.__getattribute__('adjList'))))
        print("number of edges: " + str(mazeSolver.__getattribute__('edgeCount')))

        print("\nSearch Stack:")
        for i in mazeSolver.__getattribute__('DFSSearchStack'):
            print(i.__str__())

        while len(mazeSolver.__getattribute__('DFSSearchStack')) > 1:
            node1 = mazeSolver.__getattribute__('DFSSearchStack').pop().__getattribute__('coordinate')
            node2 = mazeSolver.__getattribute__('DFSSearchStack')[
                len(mazeSolver.__getattribute__('DFSSearchStack')) - 1].__getattribute__('coordinate')

            drawPath(node1, node2, mazeSolver, mainMaze)

    elif algInput == 2:

        start = time.time()
        mazeSolver = MazeGraph(mainMaze)
        end = time.time() - start
        print("\ntime to build graph:")
        print(str(end) + " seconds\n")

        startTime = time.time()
        mazeSolver.BFS()
        end = time.time() - startTime

        print("time to complete: " + str(end) + " seconds ")
        print("number of nodes: " + str(len(mazeSolver.__getattribute__('adjList'))))
        print("number of edges: " + str(mazeSolver.__getattribute__('edgeCount')))
        print("\nSearch Path: ")

        backTrack = mazeSolver.__getattribute__('BFSBacktrack')
        backKeys = list(backTrack.keys())
        backValues = list(backTrack.values())

        endNdx = backKeys.index(mazeSolver.__getattribute__('endNode'))

        searchStack = []

        while not backKeys[endNdx] == mazeSolver.__getattribute__('startNode'):
            node1 = backKeys[endNdx]
            endNdx = backKeys.index(backValues[endNdx])

            searchStack.append(node1)

            drawPath(node1, backKeys[endNdx], mazeSolver, mainMaze)

        mazeSolver.drawNode(backKeys[endNdx])

        searchStack.append(backKeys[endNdx])

        while len(searchStack) > 0:
            print(searchStack.pop())

    elif algInput == 3:

        mazeSolver = DijkstraGraph(mainMaze)



    else:
        print("INVALID INPUT")
        exit(-1)

    outMazeName = inputMazeName[:inputMazeName.rfind(".")] + "_SOLUTION" + inputMazeName[inputMazeName.rfind("."):]

    cv2.imwrite(outMazeName, mainMaze.__getattribute__('image'))


if __name__ == "__main__":
    main()
